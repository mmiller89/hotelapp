Steps:

1) Switch UI to single window with nav bar toggles. (Meets Part B 7 and 8) DONE
2) Implement mock login service (generic). (Form Control -> Meets Part B 1 and 5) DONE
3) Creation of the User class with username, password, rewards points, and tying into database room/room service.
4) Allow User to reserve room with points if there is enough, deduct points.
5) Implement room service capabilities.
6) Implement a search (in book room) to see what rooms the user has booked.




PART B
---------------
●  code including inheritance, polymorphism, and encapsulation

●  search functionality with multiple row results and displays

●  a database component with the functionality to securely add, modify, and delete the data

●  ability to generate reports with multiple columns, multiple rows, date-time stamps, and title

●  validation functionality

●  industry-appropriate security features

●  design elements that make the application scalable
**(Nav bar below can be altered/added to -> upper nav bar can be added to if needed)**

●  a user-friendly, functional GUI
**(Implemented Angular Scence changes to clean up UI)**
-------------------

PART C
-------------------------------------------
●  a design document including a class diagram and design diagram

●  link to where the web app is hosted with HTML code (if applicable)

●  link to the GitLab repository of the code indicating the version included in this submission

●  user guide for setting up and running the application for maintenance purposes

●  user guide for running the application from a user perspective
------------------------------------------

PART D
------------------------------------------------

●  a test plan for a unit test, including screenshots

●  unit test scripts

●  the results of the unit tests based on the provided test plan, including screenshots

●  summaries of changes resulting from completed tests

------------------------------------------------