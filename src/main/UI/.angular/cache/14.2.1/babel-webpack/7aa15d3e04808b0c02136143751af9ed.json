{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { HttpHeaders } from \"@angular/common/http\";\nlet AppComponent = class AppComponent {\n  constructor(httpClient, location, locationStrategy) {\n    this.httpClient = httpClient;\n    this.location = location;\n    this.locationStrategy = locationStrategy; // private baseURL:string='http://localhost:8080';\n\n    this.baseURL = this.location.path();\n    this.getUrl = this.baseURL + '/room/reservation/v1/';\n    this.postUrl = this.baseURL + '/room/reservation/v1';\n    this.welcomeMessageURL = this.baseURL + \"/resources/greetings\";\n    this.timeZoneURL = this.baseURL + \"/timezone/\";\n    this.easternTime = \"\";\n    this.mountainTime = \"\";\n    this.utcTime = \"\";\n    this.scene = 0; //Temporary initial values\n\n    this.loggedIn = false;\n    this.loginService = new FormGroup({\n      userName: new FormControl(\"\"),\n      password: new FormControl(\"\")\n    });\n  }\n\n  ngOnInit() {\n    this.roomsearch = new FormGroup({\n      checkin: new FormControl(' '),\n      checkout: new FormControl(' ')\n    }); //     this.rooms=ROOMS;\n\n    this.getWelcome().subscribe(sentence => {\n      this.sentences = sentence;\n    });\n    this.getEastern().subscribe(time => {\n      this.easternTime = time[0];\n    });\n    this.getMountain().subscribe(time => {\n      this.mountainTime = time[0];\n    });\n    this.getUTC().subscribe(time => {\n      this.utcTime = time[0];\n    });\n    const roomsearchValueChanges$ = this.roomsearch.valueChanges; // subscribe to the stream\n\n    roomsearchValueChanges$.subscribe(x => {\n      this.currentCheckInVal = x.checkin;\n      this.currentCheckOutVal = x.checkout;\n    });\n  }\n\n  setScene(n) {\n    this.scene = n;\n  }\n\n  displayUserReservations() {\n    return this.httpClient.get(this.getUrl + \"reservationlist/\" + this.user.id, {\n      responseType: 'json'\n    }).subscribe(res => console.log(res));\n  }\n\n  validateLogin() {\n    let user = this.loginService.value.userName;\n    let password = this.loginService.value.password;\n    let login = new Login(user, password);\n    JSON.stringify(login);\n    this.httpClient.put(this.baseURL + \"/login/credentials\", login).subscribe(res => {\n      if (res) {\n        console.log(res);\n        this.loggedIn = true; // @ts-ignore\n\n        let rewards = parseInt(res['rewardsPoints']); // @ts-ignore\n\n        this.user = new User(res['id'], res['userName'], rewards);\n      }\n    });\n  } //\n  //temporary testing method - remove before full launch.\n\n\n  addOrSub(num) {\n    if (num == 0) {\n      this.user.addPoints(50);\n    } else {\n      this.user.subtractPoints(50);\n    }\n  } //temporary testing method - remove before full launch.\n  //\n\n\n  logout() {\n    if (this.loggedIn) {\n      this.saveUserInfo();\n      this.loggedIn = false;\n      this.user = null;\n    }\n  } // User data front end\n  // id: string;\n  // userName: string;\n  // rewards: number;\n\n\n  saveUserInfo() {\n    let user = new User(this.user.id, this.user.userName, this.user.rewards);\n    JSON.stringify(user);\n    this.httpClient.put(this.baseURL + \"/login/save\", user).subscribe(res => console.log(res));\n  }\n\n  getWelcome() {\n    return this.httpClient.get(this.welcomeMessageURL, {\n      responseType: 'json'\n    });\n  }\n\n  getEastern() {\n    return this.httpClient.get(this.timeZoneURL + \"eastern\", {\n      responseType: 'json'\n    });\n  }\n\n  getMountain() {\n    return this.httpClient.get(this.timeZoneURL + \"mountain\", {\n      responseType: 'json'\n    });\n  }\n\n  getUTC() {\n    return this.httpClient.get(this.timeZoneURL + \"utc\", {\n      responseType: 'json'\n    });\n  }\n\n  onSubmit({\n    value,\n    valid\n  }) {\n    this.getAll().subscribe(rooms => {\n      console.log(Object.values(rooms)[0]);\n      this.rooms = Object.values(rooms)[0];\n    });\n  }\n\n  reserveRoom(value, method, amount) {\n    this.request = new ReserveRoomRequest(value, this.user.id, this.currentCheckInVal, this.currentCheckOutVal);\n    let price = parseInt(amount);\n    this.createReservation(this.request);\n\n    if (method == \"money\") {\n      alert(\"Rerouting to payment information page --> Reservation success!\");\n    } else if (method == \"points\" && this.user.rewards >= price) {\n      alert(\"You have enough points, paying now!\");\n      this.user.rewards -= price;\n    } else {\n      alert(\"You don't have enough points, reverting to payment information page --> Reservation success!\");\n    }\n\n    this.onSubmit(this.roomsearch);\n  }\n\n  createReservation(body) {\n    let bodyString = JSON.stringify(body); // Stringify payload\n\n    let headers = new Headers({\n      'Content-Type': 'application/json'\n    }); // ... Set content type to JSON\n    // let options = new RequestOptions({headers: headers}); // Create a request option\n\n    const options = {\n      headers: new HttpHeaders().append('key', 'value')\n    };\n    this.httpClient.post(this.postUrl, body, options).subscribe(res => console.log(res));\n  }\n  /*mapRoom(response:HttpResponse<any>): Room[]{\r\n    return response.body;\r\n  }*/\n\n\n  getAll() {\n    return this.httpClient.get(this.baseURL + '/room/reservation/v1?checkin=' + this.currentCheckInVal + '&checkout=' + this.currentCheckOutVal, {\n      responseType: 'json'\n    });\n  }\n\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };\nexport class User {\n  constructor(id, userName, rewards) {\n    this.id = id;\n    this.userName = userName;\n    this.rewards = rewards;\n  }\n\n  addPoints(points) {\n    this.rewards += points;\n  }\n\n  subtractPoints(points) {\n    this.rewards -= points;\n  }\n\n}\nexport class Login {\n  constructor(userName, password) {\n    this.userName = userName;\n    this.password = password;\n  }\n\n}\nexport class ReserveRoomRequest {\n  constructor(roomId, userId, checkin, checkout) {\n    this.roomId = roomId;\n    this.userId = userId;\n    this.checkin = checkin;\n    this.checkout = checkout;\n  }\n\n}\n/*\r\nvar ROOMS: Room[]=[\r\n  {\r\n  \"id\": \"13932123\",\r\n  \"roomNumber\" : \"409\",\r\n  \"price\" :\"20\",\r\n  \"links\" : \"\"\r\n},\r\n{\r\n  \"id\": \"139324444\",\r\n  \"roomNumber\" : \"509\",\r\n  \"price\" :\"30\",\r\n  \"links\" : \"\"\r\n},\r\n{\r\n  \"id\": \"139324888\",\r\n  \"roomNumber\" : \"609\",\r\n  \"price\" :\"40\",\r\n  \"links\" : \"\"\r\n}\r\n] */","map":null,"metadata":{},"sourceType":"module"}